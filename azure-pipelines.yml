# azure-pipelines.yml
# This pipeline builds and deploys the ASP.NET Core backend to Azure App Service

# Trigger the pipeline on pushes to the main branch
trigger:
- main

# Use a Microsoft-hosted agent VM image
pool:
  vmImage: 'windows-latest' # Using Windows as the project seems to be developed on Windows

variables:
  buildConfiguration: 'Release' # Standard build configuration
  # --- Azure App Service Details ---
  # Replace with the exact name of your Azure App Service
  azureAppName: 'webapi20250527115544' # Update this with your actual Azure App Service name
  # ---------------------------------

# Define the steps (tasks) for the pipeline
steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x' # Using .NET 8.x as specified in your project file
  displayName: 'Install .NET SDK'

- script: dotnet restore
  displayName: 'Restore Dependencies'

- script: dotnet build --configuration $(buildConfiguration) --no-restore
  displayName: 'Build .NET Project'

#- script: dotnet test --no-build --verbosity normal # Uncomment if you have unit tests
#  displayName: 'Run Tests'

- script: dotnet publish -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory) --no-build
  displayName: 'Publish .NET Project'

# Create a web.config file if not already in the project
- powershell: |
    $webConfigPath = "$(Build.ArtifactStagingDirectory)/web.config"
    if (-not (Test-Path $webConfigPath)) {
      $webConfigContent = @"
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <location path="." inheritInChildApplications="false">
    <system.webServer>
      <handlers>
        <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
      </handlers>
      <aspNetCore processPath="dotnet" arguments=".\webapi.dll" stdoutLogEnabled="true" stdoutLogFile="\\?\%home%\LogFiles\stdout" hostingModel="inprocess" />
    </system.webServer>
  </location>
</configuration>
"@
      Set-Content -Path $webConfigPath -Value $webConfigContent
    }
  displayName: 'Ensure web.config exists'

# Create an example appsettings.json for the deployed app
- powershell: |
    $appSettingsPath = "$(Build.ArtifactStagingDirectory)/appsettings.json"
    if (-not (Test-Path $appSettingsPath)) {
      $appSettingsContent = @"
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
"@
      Set-Content -Path $appSettingsPath -Value $appSettingsContent
    }
  displayName: 'Create basic appsettings.json'

# Create publish artifact
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish Artifacts'

# Deploy to Azure App Service
- task: AzureWebApp@1
  inputs:
    # --- Azure Deployment Details ---
    azureSubscription: 'EduSyncAzureConnection' # Ensure this matches your Service Connection Name
    appType: 'webApp'
    appName: '$(azureAppName)'
    package: '$(Build.ArtifactStagingDirectory)'
    deploymentMethod: 'auto'
    # --------------------------------
  displayName: 'Deploy to Azure App Service'